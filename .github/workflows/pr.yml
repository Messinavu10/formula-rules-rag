name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Quick checks for PRs
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run Black (code formatting)
      run: black --check --diff src/ scripts/ tests/
      
    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ scripts/ tests/
      
    - name: Run flake8 (linting)
      run: flake8 src/ scripts/ tests/
      
    - name: Run unit tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results.xml
          
    - name: Check test coverage
      run: |
        coverage report --fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: pr-tests
        name: codecov-pr
        fail_ci_if_error: false
        
    - name: Comment PR with test results
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          let testResults = '';
          try {
            const testResultsPath = 'test-results.xml';
            if (fs.existsSync(testResultsPath)) {
              testResults = fs.readFileSync(testResultsPath, 'utf8');
            }
          } catch (error) {
            console.log('Could not read test results:', error);
          }
          
          // Create comment
          const comment = `## ðŸ§ª Test Results
          
          **Status**: ${{ job.status }}
          
          **Coverage**: Check the Codecov report above for detailed coverage information.
          
          **Test Results**: Unit tests completed successfully.
          
          ---
          *This comment was automatically generated by the CI/CD pipeline.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
